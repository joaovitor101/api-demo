# Nome do workflow (aparecerá no dashboard do GitHub Actions)
name: Java CI com Maven

# Eventos que disparam este workflow
on:
  push:
    branches: ["main"] # Executa sempre que houver um push na branch 'main'
    paths-ignore:
      - 'README.md'       # Ignora mudanças apenas no README
      - 'docs/**'         # Ignora qualquer arquivo dentro da pasta 'docs'
      - 'LICENSE'         # Ignora o arquivo de licença
      - 'CONTRIBUTING.md' # Ignora o guia de contribuição
  pull_request:
    branches: ["main"] # Executa sempre que um Pull Request for aberto para a branch 'main'
    paths-ignore:
      - 'README.md'       # Ignora mudanças apenas no README
      - 'docs/**'         # Ignora qualquer arquivo dentro da pasta 'docs'
      - 'LICENSE'         # Ignora o arquivo de licença
      - 'CONTRIBUTING.md' # Ignora o guia de contribuição
# Tarefas (jobs) que serão executadas
jobs:

  # ==============================
  # Job de CI (Integração Contínua)
  # ==============================
  build:
    name: Build (CI)
    # A máquina virtual que será usada (Ubuntu mais recente)
    runs-on: ubuntu-latest

    # Passos (steps) que a tarefa 'build' irá executar
    steps:
    # 1. Clona o nosso repositório para a máquina virtual
    - name: Checkout do código
      uses: actions/checkout@v4

    # 2. Configura o ambiente Java 24
    - name: Configurar JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin' # Uma distribuição popular do OpenJDK

    # 3. Executa o build e os testes com Maven
    - name: Build e Testes com Maven
      run: mvn -B package --file pom.xml # O comando 'package' compila e executa os testes

    # Guardar o artefato
    - name: Upload do Artefato
      uses: actions/upload-artifact@v4
      with:
        name: api-demo-jar # Nome do pacote do artefato
        path: target/*.jar # Caminho para o arquivo .jar que o Maven gerou